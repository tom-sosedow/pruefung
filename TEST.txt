Überprüfen der Formeln:

nach https://www.kenn-dein-limit.de/alkohol/haeufige-fragen/was-ist-die-blutalkoholkonzentration/:

"Sie haben 2 Bier (à 0,3 l, ca. 5 Vol.-%) getrunken und wiegen 70 Kilogramm.
Frau: (2 x 12 Gramm) / (70 Kilogramm x 0,55) = 0,6 Promille
Mann: (2 x 12 Gramm) / (70 Kilogramm x 0,68) = 0,5 Promille"

(Benutzereingaben mit "->" markiert)

-> 1 (Mann)
-> 70 (Gewicht 70kg)
-> 8 (eigenes Getränk)
-> 5 (Vol% des Getränks)
-> 660 (2x330 ml nach Beispiel)
Ergebnis sollte nach Eingabe der 9 (für Fertig) ca. 0.5 Promille ergeben:
-> 9 (Fertig)
erwartete Ausgabe: Du hast ca. 0.5xxxxx Promille Alkohol im Blut.
Ausgabe: Du hast ca. 0.546219 Promille Alkohol im Blut.

-> 1 (Frau)
-> 70 (Gewicht 70kg)
-> 8 (eigenes Getränk)
-> 5 (Vol% des Getränks)
-> 660 (2x330 ml nach Beispiel)
Ergebnis sollte nach Eingabe der 9 (für Fertig) ca. 0.6 Promille ergeben:
-> 9 (Fertig)
erwartete Ausgabe: Du hast ca. 0.6xxxxx Promille Alkohol im Blut.
Ausgabe: Du hast ca. 0.675325 Promille Alkohol im Blut.

-> 1 (Kind)
-> 70 (Gewicht 40kg)
-> 8 (eigenes Getränk)
-> 5 (Vol% des Getränks)
-> 660 (2x330 ml nach Beispiel)
Ergebnis sollte nach Eingabe der 9 (für Fertig) ca. (2*12)/(40* 0.75)=0.8 Promille ergeben:
-> 9 (Fertig)
erwartete Ausgabe: Du hast ca. 0.8xxxxx Promille Alkohol im Blut.
Ausgabe: Du hast ca. 0.866667 Promille Alkohol im Blut.

Beispiele aus https://www.bernd-leitenberger.de/volumenprozent.shtml
wurden alle getestet und stimmen grob überein, da dort andere Faktoren für den Körperwasseranteil benutzt wurden, als in der Aufgabenstellung verlangt.

//////////////////////////////////////////////////////////////
Überprüfen der Warnmeldung:
Beispiel: 80kg schwerer Mann der 50 Gläser Rum á 20ml bzw. 2cl getrunken hat.
Warnmeldung ab 3 Promille.

-> 1 (Mann)
-> 70 (Gewicht 80kg)
-> 7 (Rum)
-> 50 (50 Gläser á 20ml)
Ergebnis sollte nach Eingabe der 9 (für Fertig) ca. 10 Promille ergeben:
-> 9 (Fertig)
Warnmeldung wird (unter Ubuntu 19.10) korrekt in Rot ausgegeben
und der Promillewert von 10.1103 entspricht dem erwarteten Wert.

////////////////////////////////////////////////////////////////
Fehlerhafte Eingaben abfangen:

1. Buchstaben anstelle von Zahlen:
    Start des Programms
    -> b (Menüauswahl, ungültig)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer erneut auswählen lassen.
    erwartete Aktion trifft ein

    -> 1 (Mann)
    -> b (Körpergewicht, ungültig)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer erneut Geschlecht/Typ auswählen lassen.
    erwartete Aktion trifft ein

    -> 1 (Mann)
    -> 80 (80kg Körpergewicht)
    -> b (Menüauswahl Getränk, ungültig)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer Getränk erneut auswählen lassen.
    erwartete Aktion trifft ein

    -> 1 (Mann)
    -> 80 (Körpergewicht)
    -> 1 (Getränk: Bier)
    -> b (Menge, ungültig)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer Getränk erneut auswählen lassen.
    erwartete Aktion trifft ein

    -> 1 (Mann)
    -> 80 (Körpergewicht)
    -> 1 (Getränk: Bier)
    -> 1 (Menge, Alkoholmenge wird korrekt dem Nutzer hinzugefügt)
    -> b (Menüauswahl Getränk, ungültig)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer Getränk erneut auswählen lassen. Getränkeliste des Nutezrs sollte nicht gelöscht werden.
    -> 9
    Ausgabe von 0.18 Promille ist korrekt.
    erwartete Aktion trifft ein
    Alle Menüs der Getränke 1-7 haben denselben Code, daher können überall nur dieselben Fehler auftreten.

    -> 1 (Mann)
    -> 80 (Körpergewicht)
    -> 8 (eigenes Getränk)
    -> b (Volumenprozent, ungültige Eingabe)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer neues Getränk auswählen lassen. "Fehlerhaftes" Getränk wird nicht der Alkoholsumme des Nutzers aufaddiert.
    erwartete Aktion trifft ein

    -> 1 (Mann)
    -> 80 (Körpergewicht)
    -> 8 (eigenes Getränk)
    -> 5 (Volumenprozent)
    -> b (Menge, ungültige Eingabe)
    erwartete Aktion: Fehlermeldung ausgeben und Nutzer neues Getränk auswählen lassen. "Fehlerhaftes" Getränk wird nicht der Alkoholsumme des Nutzers aufaddiert.
    erwartete Aktion trifft ein

2. Kommazahlen mit ',' anstelle eines Punktes '.' eingeben und Mischung mit anderen Sonderzeichen:
    Erwartung: Kommazahlen , die nicht mit einem Punkt '.', sondern mit einem Komma ',' eingegeben werden, werden in das korrekte Format konvertiert. Falls mehr als ein Komma/Punkt
    eingegeben werden, führt es zu einer Fehlermeldung durch werfen einer Instanz eines std::invalid_argument und der Nutzer startet im vorherigen Auswahlmenü neu.

    -> 1,5 (Mann, ungültige Eingabe, 1 wird angenommen und der Rest (,5) aus dem Puffer gelöscht, sodass es keine weiteren Menüs beeinflusst)
    -> 80,5 (Körpergewicht, ungültige Formatierung wird im Hintergrund berichtigt und als 80.5 abgespeichert)
    -> 1 (Bier)
    -> 2,5 (Menge, 1 Glas á 250ml)
    -> 9 (Fertig)
    Ausgabe zeigt korrekten Blutalkoholwert an.

    -> 1 (Mann)
    -> 80,5.5 (Gewicht, ungültige Eingabe, generiert Fehlermeldung durch werfen einer Instanz eines std::invalid_argument und erneute Auswahl des Typs der Person wird gefordert)
    -> 1 (Mann)
    -> 80.5.5 (Gewicht, ungültige Eingabe, generiert Fehlermeldung durch werfen einer Instanz eines std::invalid_argument und erneute Auswahl des Typs der Person wird gefordert)
    -> 1 (Mann)
    -> 80.5,5 (Gewicht, ungültige Eingabe, generiert Fehlermeldung durch werfen einer Instanz eines std::invalid_argument und erneute Auswahl des Typs der Person wird gefordert)
    -> 1 (Mann)
    -> 80,5,5 (Gewicht, ungültige Eingabe, generiert Fehlermeldung durch werfen einer Instanz eines std::invalid_argument und erneute Auswahl des Typs der Person wird gefordert)
    -> 1 (Mann)
    -> #80 (Gewicht, ungültige Eingabe, generiert Fehlermeldung durch werfen einer Instanz eines std::invalid_argument und erneute Auswahl des Typs der Person wird gefordert)
    -> 1 (Mann)
    -> 80# (Gewicht, ungültige Eingabe, 80 werden abgespeichert und das '#' ignoriert und aus dem Puffer gelöscht, sodass es keine weiteren Eingabe beeinflusst)
    -> ....
    Anmerkung:
    durch Erweiterung der floatEingabePruefen() Methode könnte man nicht nur fehlgesetzte ',' und '.' herausfiltern, sondern auch andere Sonderzeichen/Buchstaben. So würde z.B. 8#9b einfach zu einer 89 konvertiert werden.
    Dies würde aber für diese Anwendung den Rahmen sprengen und den Code stark aufblähen, wäre aber an sich einfach implementierbar, falls benötigt.

3. Zu große Zahlen eingegeben
    Falls der Nutzer eine zu große Zahl eingibt, z.B. beim Gewicht oder der Menge, wirft die Funktion std::stof einen std::out_of_range, welcher am Ende des Hauptprogramms gefangen wird.
    Test:
    -> 1 (Mann)
    -> 800000000000000000000000000000000000000000000000000000
    Erwartete Fehlermeldung wird ausgegeben und der Nutzer muss erneut im Startmenü anfangen.
